# -*- coding: utf-8 -*-
"""OCM_ML_RegressionModels.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oQHOazVhu9LRb0KZkFBndBtQn1hjlaO3
"""

import os
import pandas as pd

# Load the dataset
file_path = '/content/Cleaned_OCM_Timeleft_300h_30h_0h.csv'
df = pd.read_csv(file_path)

# Assuming 'Timestamp' and other relevant columns are features and 'Timeleft' is the target
X = df.drop(columns=['RUL'])
y = df['RUL']

# Convert Timeleft to a numeric value in seconds for regression purposes
def timeleft_to_seconds(timeleft):
    hours, minutes, seconds = map(int, timeleft.split(':'))
    return hours * 3600 + minutes * 60 + seconds

y = y.apply(timeleft_to_seconds)

# Check the first few rows to understand the data
print(X.head())
print(y.head())

# Convert 'Timestamp' to datetime and extract useful features
X['Timestamp'] = pd.to_datetime(X['Timestamp'], format="%d-%m-%Y %H:%M")

# Extracting features from 'Timestamp'
X['Hour'] = X['Timestamp'].dt.hour
X['Minute'] = X['Timestamp'].dt.minute
X['Day'] = X['Timestamp'].dt.day
X['Month'] = X['Timestamp'].dt.month
X['Year'] = X['Timestamp'].dt.year

# Drop the original 'Timestamp' column
X = X.drop(columns=['Timestamp'])

# Function to split and convert columns to numeric
def split_and_convert(col, new_cols):
    split_df = col.str.split(',', expand=True)
    split_df.columns = new_cols
    for col in new_cols:
        split_df[col] = pd.to_numeric(split_df[col], errors='coerce')
    return split_df

# Split and convert 'Ferrous Particle Bin Upper Endpoints'
ferrous_cols = ['PF1', 'PF2', 'PF3', 'PF4', 'PF5', 'PF6', 'PF7', 'PF8', 'PF9', 'PF10']
ferrous_split = split_and_convert(X['Ferrous Particle Bin Upper Endpoints'], ferrous_cols)
X = pd.concat([X, ferrous_split], axis=1)
X = X.drop(columns=['Ferrous Particle Bin Upper Endpoints'])

# Split and convert 'Nonferrous Particle Bins Upper Endpoints'
nonferrous_cols = ['NPF1', 'NPF2', 'NPF3', 'NPF4', 'NPF5', 'NPF6', 'NPF7', 'NPF8', 'NPF9', 'NPF10']
nonferrous_split = split_and_convert(X['Nonferrous Particle Bins Upper Endpoints'], nonferrous_cols)
X = pd.concat([X, nonferrous_split], axis=1)
X = X.drop(columns=['Nonferrous Particle Bins Upper Endpoints'])

# Fill missing values or drop rows/columns with missing values
X = X.fillna(0)

print(X.head())

# Convert 'Timestamp' to datetime and extract useful features
X['Timestamp'] = pd.to_datetime(X['Timestamp'], format="%d-%m-%Y %H:%M")

# Extracting features from 'Timestamp'
X['Hour'] = X['Timestamp'].dt.hour
X['Minute'] = X['Timestamp'].dt.minute
X['Day'] = X['Timestamp'].dt.day
X['Month'] = X['Timestamp'].dt.month
X['Year'] = X['Timestamp'].dt.year

# Drop the original 'Timestamp' column
X = X.drop(columns=['Timestamp'])

# Split 'Ferrous Particle Bin Upper Endpoints' into separate columns
ferrous_cols = ['PF1', 'PF2', 'PF3', 'PF4', 'PF5', 'PF6', 'PF7', 'PF8', 'PF9', 'PF10']
ferrous_split = X['Ferrous Particle Bin Upper Endpoints'].str.split(',', expand=True)
ferrous_split.columns = ferrous_cols
X = pd.concat([X, ferrous_split], axis=1)
X = X.drop(columns=['Ferrous Particle Bin Upper Endpoints'])

# Split 'Nonferrous Particle Bins Upper Endpoints' into separate columns
nonferrous_cols = ['NPF1', 'NPF2', 'NPF3', 'NPF4', 'NPF5', 'NPF6', 'NPF7', 'NPF8', 'NPF9', 'NPF10']
nonferrous_split = X['Nonferrous Particle Bins Upper Endpoints'].str.split(',', expand=True)
nonferrous_split.columns = nonferrous_cols
X = pd.concat([X, nonferrous_split], axis=1)
X = X.drop(columns=['Nonferrous Particle Bins Upper Endpoints'])

# Convert all new columns to numeric, handle any conversion errors
X[ferrous_cols + nonferrous_cols] = X[ferrous_cols + nonferrous_cols].apply(pd.to_numeric, errors='coerce')

# Fill missing values or drop rows/columns with missing values
X = X.fillna(0)

print(X.head())

# Convert 'Timestamp' to datetime and extract useful features
X['Timestamp'] = pd.to_datetime(X['Timestamp'], format="%d-%m-%Y %H:%M")

# Extracting features from 'Timestamp'
X['Hour'] = X['Timestamp'].dt.hour
X['Minute'] = X['Timestamp'].dt.minute
X['Day'] = X['Timestamp'].dt.day
X['Month'] = X['Timestamp'].dt.month
X['Year'] = X['Timestamp'].dt.year

# Drop the original 'Timestamp' column
X = X.drop(columns=['Timestamp'])

# Function to split and convert columns to numeric
def split_and_convert(col, new_cols):
    split_df = col.str.split(',', expand=True)
    split_df.columns = new_cols
    for col in new_cols:
        split_df[col] = pd.to_numeric(split_df[col], errors='coerce')
    return split_df

# Split and convert 'Ferrous Particle Bin Upper Endpoints'
ferrous_cols = ['PF1', 'PF2', 'PF3', 'PF4', 'PF5', 'PF6', 'PF7', 'PF8', 'PF9', 'PF10']
ferrous_split = split_and_convert(X['Ferrous Particle Bin Upper Endpoints'], ferrous_cols)
X = pd.concat([X, ferrous_split], axis=1)
X = X.drop(columns=['Ferrous Particle Bin Upper Endpoints'])

# Split and convert 'Nonferrous Particle Bins Upper Endpoints'
nonferrous_cols = ['NPF1', 'NPF2', 'NPF3', 'NPF4', 'NPF5', 'NPF6', 'NPF7', 'NPF8', 'NPF9', 'NPF10']
nonferrous_split = split_and_convert(X['Nonferrous Particle Bins Upper Endpoints'], nonferrous_cols)
X = pd.concat([X, nonferrous_split], axis=1)
X = X.drop(columns=['Nonferrous Particle Bins Upper Endpoints'])

# Fill missing values or drop rows/columns with missing values
X = X.fillna(0)

print(X.head())

# Convert 'Timestamp' to datetime and extract useful features
X['Timestamp'] = pd.to_datetime(X['Timestamp'], format="%d-%m-%Y %H:%M")

# Extracting features from 'Timestamp'
X['Hour'] = X['Timestamp'].dt.hour
X['Minute'] = X['Timestamp'].dt.minute
X['Day'] = X['Timestamp'].dt.day
X['Month'] = X['Timestamp'].dt.month
X['Year'] = X['Timestamp'].dt.year

# Drop the original 'Timestamp' column
X = X.drop(columns=['Timestamp'])

# Function to split and convert columns to numeric
def split_and_convert(col, new_cols):
    split_df = col.str.split(',', expand=True)
    split_df.columns = new_cols
    for col in new_cols:
        split_df[col] = pd.to_numeric(split_df[col], errors='coerce')
    return split_df

# Split and convert 'Ferrous Particle Bin Upper Endpoints'
ferrous_cols = ['PF1', 'PF2', 'PF3', 'PF4', 'PF5', 'PF6', 'PF7', 'PF8', 'PF9', 'PF10']
ferrous_split = split_and_convert(X['Ferrous Particle Bin Upper Endpoints'], ferrous_cols)
X = pd.concat([X, ferrous_split], axis=1)
X = X.drop(columns=['Ferrous Particle Bin Upper Endpoints'])

# Split and convert 'Nonferrous Particle Bins Upper Endpoints'
nonferrous_cols = ['NPF1', 'NPF2', 'NPF3', 'NPF4', 'NPF5', 'NPF6', 'NPF7', 'NPF8', 'NPF9', 'NPF10']
nonferrous_split = split_and_convert(X['Nonferrous Particle Bins Upper Endpoints'], nonferrous_cols)
X = pd.concat([X, nonferrous_split], axis=1)
X = X.drop(columns=['Nonferrous Particle Bins Upper Endpoints'])

# Fill missing values or drop rows/columns with missing values
X = X.fillna(0)

print(X.head())

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Load the CSV file
file_path = '/content/Cleaned_OCM_Timeleft_300h_30h_0h.csv'
data = pd.read_csv(file_path)

# Convert 'RUL' to numeric type
data['RUL'] = pd.to_numeric(data['RUL'], errors='coerce')

# Drop rows with missing 'RUL' values
data = data.dropna(subset=['RUL'])

# Convert remaining object columns to numeric if possible
for col in data.columns:
    if data[col].dtype == 'object':
        data[col] = pd.to_numeric(data[col], errors='coerce')

# Fill remaining NaNs with column mean
data = data.fillna(data.mean())

# Verify the data types and ensure no NaNs are present
print(data.info())
print(data.isna().sum().sum())

# Separate features and target
X = data.drop(columns=['RUL', 'Timestamp'])
y = data['RUL']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate error metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f"MAE: {mae}, MSE: {mse}, RMSE: {rmse}")

import pandas as pd

# Load the dataset
file_path = '/content/NewCleaned_OCM_Timeleft_300h_30h_0h.csv'
df = pd.read_csv(file_path)

# Assuming 'Timestamp' and other relevant columns are features and 'Timeleft' is the target
X = df.drop(columns=['RUL'])
y = df['RUL']

# Convert Timeleft to a numeric value in seconds for regression purposes
def timeleft_to_seconds(timeleft):
    hours, minutes, seconds = map(int, timeleft.split(':'))
    return hours * 3600 + minutes * 60 + seconds

y = y.apply(timeleft_to_seconds)

# Check the first few rows to understand the data
print(X.head())
print(y.head())

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

# Load the dataset
file_path = '/content/NewCleaned_OCM_Timeleft_300h_30h_0h.csv'
df = pd.read_csv(file_path)

# Function to convert "hh:mm:ss" to total seconds
def time_to_seconds(time_str):
    h, m, s = map(int, time_str.split(':'))
    return h * 3600 + m * 60 + s

# Convert 'Timeleft' to total seconds
df['Timeleft_seconds'] = df['RUL'].apply(time_to_seconds)

# Prepare feature columns (assuming all columns except 'Timeleft' and 'Timeleft_seconds' are features)
features = df.drop(columns=['RUL', 'Timeleft_seconds'])

# Convert any categorical columns to numerical (if necessary)
features = pd.get_dummies(features)

# Target column
target = df['Timeleft_seconds']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train a Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Function to convert total seconds to "hh:mm:ss"
def seconds_to_time(seconds):
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    return f'{int(h):02}:{int(m):02}:{int(s):02}'

# Convert predicted values back to "hh:mm:ss"
y_pred_time = [seconds_to_time(y) for y in y_pred]

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# Create a DataFrame with actual and predicted values
results = pd.DataFrame({
    'Actual Timeleft': [seconds_to_time(y) for y in y_test],
    'Predicted Timeleft': y_pred_time
})

# Save the results to a new CSV file
results.to_csv('Timeleft_Predictions.csv', index=False)
print("Predictions saved to 'Timeleft_Predictions.csv'")

import matplotlib.pyplot as plt

# Generate the graph
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual Timeleft (seconds)')
plt.ylabel('Predicted Timeleft (seconds)')
plt.title('Actual vs Predicted Timeleft')
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/NewCleaned_OCM_Timeleft_300h_30h_0h.csv'
df = pd.read_csv(file_path)

# Function to convert "hh:mm:ss" to total seconds
def time_to_seconds(time_str):
    h, m, s = map(int, time_str.split(':'))
    return h * 3600 + m * 60 + s

# Convert 'Timeleft' to total seconds
df['Timeleft_seconds'] = df['RUL'].apply(time_to_seconds)

# Prepare feature columns (assuming all columns except 'Timeleft' and 'Timeleft_seconds' are features)
features = df.drop(columns=['RUL', 'Timeleft_seconds'])

# Convert any categorical columns to numerical (if necessary)
features = pd.get_dummies(features)

# Target column
target = df['Timeleft_seconds']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Define the parameter grid for Grid Search
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [10, 20, 30, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Initialize the RandomForestRegressor
rf = RandomForestRegressor(random_state=42)

# Initialize GridSearchCV
grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2, scoring='neg_mean_absolute_error')

# Fit GridSearchCV
grid_search.fit(X_train, y_train)

# Get the best estimator
best_rf = grid_search.best_estimator_

# Predict on the test set with the best estimator
y_pred = best_rf.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
print(f'Reduced Mean Absolute Error: {mae}')

# Function to convert total seconds to "hh:mm:ss"
def seconds_to_time(seconds):
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    return f'{int(h):02}:{int(m):02}:{int(s):02}'

# Convert predicted values back to "hh:mm:ss"
y_pred_time = [seconds_to_time(y) for y in y_pred]

# Create a DataFrame with actual and predicted values
results = pd.DataFrame({
    'Actual Timeleft': [seconds_to_time(y) for y in y_test],
    'Predicted Timeleft': y_pred_time
})

# Save the results to a new CSV file
results.to_csv('MLmodel_Timeleft_Predictions.csv', index=False)
print("Predictions saved to 'Timeleft_Predictions.csv'")

# Generate the graph
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual Timeleft (seconds)')
plt.ylabel('Predicted Timeleft (seconds)')
plt.title('Actual vs Predicted Timeleft in RFR')
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/NewCleaned_OCM_Timeleft_300h_30h_0h.csv'
df = pd.read_csv(file_path)

# Function to convert "hh:mm:ss" to total seconds
def time_to_seconds(time_str):
    h, m, s = map(int, time_str.split(':'))
    return h * 3600 + m * 60 + s

# Convert 'Timeleft' to total seconds
df['Timeleft_seconds'] = df['RUL'].apply(time_to_seconds)

# Prepare feature columns (assuming all columns except 'Timeleft' and 'Timeleft_seconds' are features)
features = df.drop(columns=['RUL', 'Timeleft_seconds'])

# Convert any categorical columns to numerical (if necessary)
features = pd.get_dummies(features)

# Target column
target = df['Timeleft_seconds']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Define the parameter grid for Grid Search
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [3, 5, 7],
    'learning_rate': [0.01, 0.05, 0.1],
    'subsample': [0.7, 0.8, 0.9, 1.0]
}

# Initialize the GradientBoostingRegressor
gbr = GradientBoostingRegressor(random_state=42)

# Initialize GridSearchCV
grid_search = GridSearchCV(estimator=gbr, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2, scoring='neg_mean_absolute_error')

# Fit GridSearchCV
grid_search.fit(X_train, y_train)

# Get the best estimator
best_gbr = grid_search.best_estimator_

# Predict on the test set with the best estimator
y_pred = best_gbr.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
print(f'Reduced Mean Absolute Error: {mae}')

# Function to convert total seconds to "hh:mm:ss"
def seconds_to_time(seconds):
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    return f'{int(h):02}:{int(m):02}:{int(s):02}'

# Convert predicted values back to "hh:mm:ss"
y_pred_time = [seconds_to_time(y) for y in y_pred]

# Create a DataFrame with actual and predicted values
results = pd.DataFrame({
    'Actual Timeleft': [seconds_to_time(y) for y in y_test],
    'Predicted Timeleft': y_pred_time
})

# Save the results to a new CSV file
results.to_csv('GBR_Timeleft_Predictions.csv', index=False)
print("Predictions saved to 'Timeleft_Predictions_GBR.csv'")

# Generate the graph
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual Timeleft (seconds)')
plt.ylabel('Predicted Timeleft (seconds)')
plt.title('Actual vs Predicted Timeleft')
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/NewCleaned_OCM_Timeleft_300h_30h_0h.csv'
df = pd.read_csv(file_path)

# Function to convert "hh:mm:ss" to total seconds
def time_to_seconds(time_str):
    h, m, s = map(int, time_str.split(':'))
    return h * 3600 + m * 60 + s

# Convert 'Timeleft' to total seconds
df['Timeleft_seconds'] = df['RUL'].apply(time_to_seconds)

# Prepare feature columns (assuming all columns except 'Timeleft' and 'Timeleft_seconds' are features)
features = df.drop(columns=['RUL', 'Timeleft_seconds'])

# Convert any categorical columns to numerical (if necessary)
features = pd.get_dummies(features)

# Target column
target = df['Timeleft_seconds']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Initialize the LinearRegression model
lr = LinearRegression()

# Train the model
lr.fit(X_train, y_train)

# Predict on the test set
y_pred = lr.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# Function to convert total seconds to "hh:mm:ss"
def seconds_to_time(seconds):
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    return f'{int(h):02}:{int(m):02}:{int(s):02}'

# Convert predicted values back to "hh:mm:ss"
y_pred_time = [seconds_to_time(y) for y in y_pred]

# Create a DataFrame with actual and predicted values
results = pd.DataFrame({
    'Actual Timeleft': [seconds_to_time(y) for y in y_test],
    'Predicted Timeleft': y_pred_time
})

# Save the results to a new CSV file
results.to_csv('LR_Timeleft_Predictions.csv', index=False)
print("Predictions saved to 'Timeleft_Predictions_LR.csv'")

# Generate the graph
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual Timeleft (seconds)')
plt.ylabel('Predicted Timeleft (seconds)')
plt.title('Actual vs Predicted Timeleft')
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/NewCleaned_OCM_Timeleft_300h_30h_0h.csv'
df = pd.read_csv(file_path)

# Function to convert "hh:mm:ss" to total seconds
def time_to_seconds(time_str):
    h, m, s = map(int, time_str.split(':'))
    return h * 3600 + m * 60 + s

# Convert 'Timeleft' to total seconds
df['Timeleft_seconds'] = df['RUL'].apply(time_to_seconds)

# Prepare feature columns (assuming all columns except 'Timeleft' and 'Timeleft_seconds' are features)
features = df.drop(columns=['RUL', 'Timeleft_seconds'])

# Convert any categorical columns to numerical (if necessary)
features = pd.get_dummies(features)

# Target column
target = df['Timeleft_seconds']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize the Ridge Regression model
ridge = Ridge(alpha=1.0)

# Train the model
ridge.fit(X_train_scaled, y_train)

# Predict on the test set
y_pred = ridge.predict(X_test_scaled)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# Function to convert total seconds to "hh:mm:ss"
def seconds_to_time(seconds):
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    return f'{int(h):02}:{int(m):02}:{int(s):02}'

# Convert predicted values back to "hh:mm:ss"
y_pred_time = [seconds_to_time(y) for y in y_pred]

# Create a DataFrame with actual and predicted values
results = pd.DataFrame({
    'Actual Timeleft': [seconds_to_time(y) for y in y_test],
    'Predicted Timeleft': y_pred_time
})

# Save the results to a new CSV file
results.to_csv('RidgeLR_Timeleft_Predictions.csv', index=False)
print("Predictions saved to 'Timeleft_Predictions_Ridge.csv'")

# Generate the graph
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual Timeleft (seconds)')
plt.ylabel('Predicted Timeleft (seconds)')
plt.title('Actual vs Predicted Timeleft')
plt.grid(True)
plt.show()