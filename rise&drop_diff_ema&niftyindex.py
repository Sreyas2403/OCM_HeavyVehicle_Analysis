# -*- coding: utf-8 -*-
"""Rise&Drop_Diff_EMA&NiftyIndex.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vFdmubxRwK0AmkfNqqv2A_XniacVTT7I
"""

!pip install yfinance nsepython

#version1: all rise,drop, ema, nse index in one plot
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import datetime
from datetime import timedelta
import numpy as np
import matplotlib.dates as mdates

# List of 10 stock symbols on NSE
stock_symbols = ["RELIANCE.NS", "TCS.NS", "INFY.NS", "HDFCBANK.NS", "ICICIBANK.NS", "HINDUNILVR.NS", "KOTAKBANK.NS", "LT.NS", "SBIN.NS", "BHARTIARTL.NS"]

# Function to get closing prices
def get_closing_prices(symbols, date):
    closing_prices = {}
    for symbol in symbols:
        stock = yf.Ticker(symbol)
        history = stock.history(start=date, end=date + timedelta(days=1))
        if not history.empty:
            closing_prices[symbol] = history['Close'].values[0]
        else:
            closing_prices[symbol] = np.nan
    return closing_prices

# Function to adjust for non-trading days
def adjust_date(date):
    while True:
        closing_prices = get_closing_prices(["RELIANCE.NS"], date)
        if not pd.isna(closing_prices["RELIANCE.NS"]):
            return date
        date -= timedelta(days=1)

# Initialize lists to store results
dates = []
num_stocks_rise = []
num_stocks_drop = []
difference_rise_drop = []

# Define today's and yesterday's dates
today = datetime.date.today()
yesterday = today - timedelta(days=1)

# Check if it's before market opens (9 AM IST)
current_time = datetime.datetime.now().time()
if current_time < datetime.time(9, 0):
    today -= timedelta(days=1)
    yesterday -= timedelta(days=1)

# Adjust dates for non-trading days
today = adjust_date(today)
yesterday = adjust_date(yesterday)

# Loop for 365 days
for i in range(365):
    # Fetch closing prices
    yesterday_closing_prices = get_closing_prices(stock_symbols, yesterday)
    today_closing_prices = get_closing_prices(stock_symbols, today)

    # Calculate the number of stocks that have risen and dropped
    stocks_rise = 0
    stocks_drop = 0
    for symbol in stock_symbols:
        if not pd.isna(yesterday_closing_prices[symbol]) and not pd.isna(today_closing_prices[symbol]):
            if today_closing_prices[symbol] > yesterday_closing_prices[symbol]:
                stocks_rise += 1
            elif today_closing_prices[symbol] < yesterday_closing_prices[symbol]:
                stocks_drop += 1

    # Store results
    dates.append(today)
    num_stocks_rise.append(stocks_rise)
    num_stocks_drop.append(stocks_drop)
    difference_rise_drop.append(stocks_rise - stocks_drop)

    # Update dates for next iteration
    today = yesterday - timedelta(days=1)
    yesterday = today - timedelta(days=1)

    # Adjust dates for non-trading days
    today = adjust_date(today)
    yesterday = adjust_date(yesterday)

# Plot the results
fig, ax1 = plt.subplots(figsize=(20, 15))

ax1.bar(dates, num_stocks_rise, color='green', label='Stocks Rise', alpha=0.6)
ax1.bar(dates, num_stocks_drop, color='red', label='Stocks Drop', alpha=0.6)
ax1.plot(dates, difference_rise_drop, color='blue', label='Difference (Rise - Drop)')

# Format dates on x-axis
ax1.xaxis.set_major_locator(mdates.MonthLocator())
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m-%Y'))

# Fetch Nifty index data for the same period
nifty = yf.Ticker("^NSEI")
nifty_history = nifty.history(start=dates[-1], end=dates[0])
nifty_closing_prices = nifty_history['Close']

ax2 = ax1.twinx()
ax2.plot(nifty_closing_prices.index, nifty_closing_prices, color='brown', label='Nifty Index')

# Calculate and plot EMA lines
ema_20 = nifty_closing_prices.ewm(span=20, adjust=False).mean()
ema_100 = nifty_closing_prices.ewm(span=100, adjust=False).mean()
ema_200 = nifty_closing_prices.ewm(span=200, adjust=False).mean()

ax2.plot(ema_20.index, ema_20, color='yellow', label='EMA 20')
ax2.plot(ema_100.index, ema_100, color='purple', label='EMA 100')
ax2.plot(ema_200.index, ema_200, color='pink', label='EMA 200')

ax1.set_xlabel('Date')
ax1.set_ylabel('Number of Stocks')
ax2.set_ylabel('Nifty Index')

fig.autofmt_xdate()
fig.tight_layout()

fig.legend(loc='upper left', bbox_to_anchor=(0.1,0.9), bbox_transform=ax1.transAxes)
plt.title('Stock Analysis Over 365 Days')
plt.show()

#version2: subplot1: rise, drop, diff ; subplot2: nse index, ema
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import datetime
from datetime import timedelta
import numpy as np
import matplotlib.dates as mdates

# List of 10 stock symbols on NSE
stock_symbols = ["RELIANCE.NS", "TCS.NS", "INFY.NS", "HDFCBANK.NS", "ICICIBANK.NS", "HINDUNILVR.NS", "KOTAKBANK.NS", "LT.NS", "SBIN.NS", "BHARTIARTL.NS"]

# Function to get closing prices
def get_closing_prices(symbols, date):
    closing_prices = {}
    for symbol in symbols:
        stock = yf.Ticker(symbol)
        history = stock.history(start=date, end=date + timedelta(days=1))
        if not history.empty:
            closing_prices[symbol] = history['Close'].values[0]
        else:
            closing_prices[symbol] = np.nan
    return closing_prices

# Function to adjust for non-trading days
def adjust_date(date):
    while True:
        closing_prices = get_closing_prices(["RELIANCE.NS"], date)
        if not pd.isna(closing_prices["RELIANCE.NS"]):
            return date
        date -= timedelta(days=1)

# Initialize lists to store results
dates = []
num_stocks_rise = []
num_stocks_drop = []
difference_rise_drop = []

# Define today's and yesterday's dates
today = datetime.date.today()
yesterday = today - timedelta(days=1)

# Check if it's before market opens (9 AM IST)
current_time = datetime.datetime.now().time()
if current_time < datetime.time(9, 0):
    today -= timedelta(days=1)
    yesterday -= timedelta(days=1)

# Adjust dates for non-trading days
today = adjust_date(today)
yesterday = adjust_date(yesterday)

# Loop for 365 days
for i in range(365):
    # Fetch closing prices
    yesterday_closing_prices = get_closing_prices(stock_symbols, yesterday)
    today_closing_prices = get_closing_prices(stock_symbols, today)

    # Calculate the number of stocks that have risen and dropped
    stocks_rise = 0
    stocks_drop = 0
    for symbol in stock_symbols:
        if not pd.isna(yesterday_closing_prices[symbol]) and not pd.isna(today_closing_prices[symbol]):
            if today_closing_prices[symbol] > yesterday_closing_prices[symbol]:
                stocks_rise += 1
            elif today_closing_prices[symbol] < yesterday_closing_prices[symbol]:
                stocks_drop += 1

    # Store results
    dates.append(today)
    num_stocks_rise.append(stocks_rise)
    num_stocks_drop.append(stocks_drop)
    difference_rise_drop.append(stocks_rise - stocks_drop)

    # Update dates for next iteration
    today = yesterday - timedelta(days=1)
    yesterday = today - timedelta(days=1)

    # Adjust dates for non-trading days
    today = adjust_date(today)
    yesterday = adjust_date(yesterday)

# Create subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 12), sharex=True)

# Plot number of stocks rising and dropping
ax1.bar(dates, num_stocks_rise, color='green', label='Stocks Rise', alpha=0.6, width=0.4, align='center')
ax1.bar(dates, num_stocks_drop, color='red', label='Stocks Drop', alpha=0.6, width=0.4, align='center')
ax1.plot(dates, difference_rise_drop, color='blue', label='Difference (Rise - Drop)')
ax1.set_ylabel('Number of Stocks')
ax1.legend(loc='upper left')
ax1.set_ylim([0, 10])

# Fetch Nifty index data for the same period
nifty = yf.Ticker("^NSEI")
nifty_history = nifty.history(start=dates[-1], end=dates[0])
nifty_closing_prices = nifty_history['Close']

# Plot Nifty index and EMA lines
ax2.plot(nifty_closing_prices.index, nifty_closing_prices, color='brown', label='Nifty Index')

# Calculate and plot EMA lines
ema_20 = nifty_closing_prices.ewm(span=20, adjust=False).mean()
ema_100 = nifty_closing_prices.ewm(span=100, adjust=False).mean()
ema_200 = nifty_closing_prices.ewm(span=200, adjust=False).mean()

ax2.plot(ema_20.index, ema_20, color='yellow', label='EMA 20')
ax2.plot(ema_100.index, ema_100, color='purple', label='EMA 100')
ax2.plot(ema_200.index, ema_200, color='pink', label='EMA 200')

ax2.set_ylabel('Nifty Index')
ax2.legend(loc='upper left')

# Format dates on x-axis
ax2.xaxis.set_major_locator(mdates.MonthLocator())
ax2.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m-%Y'))

fig.autofmt_xdate()
fig.tight_layout()

fig.suptitle('Stock Analysis Over 365 Days', y=0.95)
plt.show()

#version2: subplot1: rise, drop, diff ; subplot2: nse index, ema
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import datetime
from datetime import timedelta
import numpy as np
import matplotlib.dates as mdates

# List of 10 stock symbols on NSE
stock_symbols = ["RELIANCE.NS", "TCS.NS", "INFY.NS", "HDFCBANK.NS", "ICICIBANK.NS", "HINDUNILVR.NS", "KOTAKBANK.NS", "LT.NS", "SBIN.NS", "BHARTIARTL.NS"]

# Function to get closing prices
def get_closing_prices(symbols, date):
    closing_prices = {}
    for symbol in symbols:
        stock = yf.Ticker(symbol)
        history = stock.history(start=date, end=date + timedelta(days=1))
        if not history.empty:
            closing_prices[symbol] = history['Close'].values[0]
        else:
            closing_prices[symbol] = np.nan
    return closing_prices

# Function to adjust for non-trading days
def adjust_date(date):
    while True:
        closing_prices = get_closing_prices(["RELIANCE.NS"], date)
        if not pd.isna(closing_prices["RELIANCE.NS"]):
            return date
        date -= timedelta(days=1)

# Initialize lists to store results
dates = []
num_stocks_rise = []
num_stocks_drop = []
difference_rise_drop = []

# Define today's and yesterday's dates
today = datetime.date.today()
yesterday = today - timedelta(days=1)

# Check if it's before market opens (9 AM IST)
current_time = datetime.datetime.now().time()
if current_time < datetime.time(9, 0):
    today -= timedelta(days=1)
    yesterday -= timedelta(days=1)

# Adjust dates for non-trading days
today = adjust_date(today)
yesterday = adjust_date(yesterday)

# Loop for 365 days
for i in range(365):
    # Fetch closing prices
    yesterday_closing_prices = get_closing_prices(stock_symbols, yesterday)
    today_closing_prices = get_closing_prices(stock_symbols, today)

    # Calculate the number of stocks that have risen and dropped
    stocks_rise = 0
    stocks_drop = 0
    for symbol in stock_symbols:
        if not pd.isna(yesterday_closing_prices[symbol]) and not pd.isna(today_closing_prices[symbol]):
            if today_closing_prices[symbol] > yesterday_closing_prices[symbol]:
                stocks_rise += 1
            elif today_closing_prices[symbol] < yesterday_closing_prices[symbol]:
                stocks_drop += 1

    # Store results
    dates.append(today)
    num_stocks_rise.append(stocks_rise)
    num_stocks_drop.append(stocks_drop)
    difference_rise_drop.append(stocks_rise - stocks_drop)

    # Update dates for next iteration
    today = yesterday - timedelta(days=1)
    yesterday = today - timedelta(days=1)

    # Adjust dates for non-trading days
    today = adjust_date(today)
    yesterday = adjust_date(yesterday)
    print(stocks_rise, stocks_drop)

# Create subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 12), sharex=True)

# Plot number of stocks rising and dropping
ax1.bar(dates, num_stocks_rise, color='green', label='Stocks Rise', alpha=0.6, width=0.4, align='center')
ax1.bar(dates, num_stocks_drop, color='red', label='Stocks Drop', alpha=0.6, width=0.4, align='center')
ax1.plot(dates, difference_rise_drop, color='blue', label='Difference (Rise - Drop)')
ax1.set_ylabel('Number of Stocks')
ax1.legend(loc='upper left')
ax1.set_ylim([0, 10])

# Fetch Nifty index data for the same period
nifty = yf.Ticker("^NSEI")
nifty_history = nifty.history(start=dates[-1], end=dates[0])
nifty_closing_prices = nifty_history['Close']

# Plot Nifty index and EMA lines
ax2.plot(nifty_closing_prices.index, nifty_closing_prices, color='brown', label='Nifty Index')

# Calculate and plot EMA lines
ema_20 = nifty_closing_prices.ewm(span=20, adjust=False).mean()
ema_100 = nifty_closing_prices.ewm(span=100, adjust=False).mean()
ema_200 = nifty_closing_prices.ewm(span=200, adjust=False).mean()

ax2.plot(ema_20.index, ema_20, color='yellow', label='EMA 20')
ax2.plot(ema_100.index, ema_100, color='purple', label='EMA 100')
ax2.plot(ema_200.index, ema_200, color='pink', label='EMA 200')

ax2.set_ylabel('Nifty Index')
ax2.legend(loc='upper left')

# Format dates on x-axis
ax2.xaxis.set_major_locator(mdates.MonthLocator())
ax2.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m-%Y'))

fig.autofmt_xdate()
fig.tight_layout()

fig.suptitle('Stock Analysis Over 365 Days', y=0.95)
plt.show()

#version2: subplot1: rise, drop, diff ; subplot2: nse index, ema
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import datetime
from datetime import timedelta
import numpy as np
import matplotlib.dates as mdates

# List of 10 stock symbols on NSE
stock_symbols = ["RELIANCE.NS", "TCS.NS", "INFY.NS", "HDFCBANK.NS", "ICICIBANK.NS", "HINDUNILVR.NS", "KOTAKBANK.NS", "LT.NS", "SBIN.NS", "BHARTIARTL.NS"]

# Function to get closing prices
def get_closing_prices(symbols, date):
    closing_prices = {}
    for symbol in symbols:
        stock = yf.Ticker(symbol)
        history = stock.history(start=date, end=date + timedelta(days=1))
        if not history.empty:
            closing_prices[symbol] = history['Close'].values[0]
        else:
            closing_prices[symbol] = np.nan
    return closing_prices

# Function to adjust for non-trading days
def adjust_date(date):
    while True:
        closing_prices = get_closing_prices(["RELIANCE.NS"], date)
        if not pd.isna(closing_prices["RELIANCE.NS"]):
            return date
        date -= timedelta(days=1)

# Initialize lists to store results
dates = []
num_stocks_rise = []
num_stocks_drop = []
difference_rise_drop = []

# Define today's and yesterday's dates
today = datetime.date.today()
yesterday = today - timedelta(days=1)

# Check if it's before market opens (9 AM IST)
current_time = datetime.datetime.now().time()
if current_time < datetime.time(9, 0):
    today -= timedelta(days=1)
    yesterday -= timedelta(days=1)

# Adjust dates for non-trading days
today = adjust_date(today)
yesterday = adjust_date(yesterday)

# Loop for 365 days
for i in range(365):
    # Fetch closing prices
    yesterday_closing_prices = get_closing_prices(stock_symbols, yesterday)
    today_closing_prices = get_closing_prices(stock_symbols, today)

    # Calculate the number of stocks that have risen and dropped
    stocks_rise = 0
    stocks_drop = 0
    for symbol in stock_symbols:
        if not pd.isna(yesterday_closing_prices[symbol]) and not pd.isna(today_closing_prices[symbol]):
            if today_closing_prices[symbol] > yesterday_closing_prices[symbol]:
                stocks_rise += 1
            elif today_closing_prices[symbol] < yesterday_closing_prices[symbol]:
                stocks_drop += 1

    # Store results
    dates.append(today)
    num_stocks_rise.append(stocks_rise)
    num_stocks_drop.append(stocks_drop)
    difference_rise_drop.append(stocks_rise - stocks_drop)

    # Update dates for next iteration
    today = yesterday - timedelta(days=1)
    yesterday = today - timedelta(days=1)

    # Adjust dates for non-trading days
    today = adjust_date(today)
    yesterday = adjust_date(yesterday)
    print(stocks_rise, stocks_drop)
print(num_stocks_drop, num_stocks_rise)
# Create subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 12), sharex=True)

# Plot number of stocks rising and dropping
ax1.bar(dates, num_stocks_rise, color='green', label='Stocks Rise', alpha=0.6, width=0.4, align='center')
ax1.bar(dates, num_stocks_drop, color='red', label='Stocks Drop', alpha=0.6, width=0.4, align='center')
ax1.plot(dates, difference_rise_drop, color='blue', label='Difference (Rise - Drop)')
ax1.set_ylabel('Number of Stocks')
ax1.legend(loc='upper left')
ax1.set_ylim([0, 10])

# Fetch Nifty index data for the same period
nifty = yf.Ticker("^NSEI")
nifty_history = nifty.history(start=dates[-1], end=dates[0])
nifty_closing_prices = nifty_history['Close']

# Plot Nifty index and EMA lines
ax2.plot(nifty_closing_prices.index, nifty_closing_prices, color='brown', label='Nifty Index')

# Calculate and plot EMA lines
ema_20 = nifty_closing_prices.ewm(span=20, adjust=False).mean()
ema_100 = nifty_closing_prices.ewm(span=100, adjust=False).mean()
ema_200 = nifty_closing_prices.ewm(span=200, adjust=False).mean()

ax2.plot(ema_20.index, ema_20, color='yellow', label='EMA 20')
ax2.plot(ema_100.index, ema_100, color='purple', label='EMA 100')
ax2.plot(ema_200.index, ema_200, color='pink', label='EMA 200')

ax2.set_ylabel('Nifty Index')
ax2.legend(loc='upper left')

# Format dates on x-axis
ax2.xaxis.set_major_locator(mdates.MonthLocator())
ax2.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m-%Y'))

fig.autofmt_xdate()
fig.tight_layout()

fig.suptitle('Stock Analysis Over 365 Days', y=0.95)
plt.show()